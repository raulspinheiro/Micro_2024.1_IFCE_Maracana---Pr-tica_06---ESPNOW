#include <Arduino.h>
#include <esp_now.h>
#include <WiFi.h>

// Estrutura para enviar dados
// Deve combinar com a estrutura do receptor
typedef struct struct_message {
    bool ledState;
} struct_message;

// Inicializa a estrutura de mensagem
struct_message myData;

// MAC Address do receptor
uint8_t broadcastAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

// Callback quando os dados são enviados
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nStatus do Envio: ");
  if (status == ESP_NOW_SEND_SUCCESS) {
    Serial.println("Sucesso");
  } else {
    Serial.println("Falha");
  }
}

void setup() {
  // Inicializa a Serial
  Serial.begin(115200);

  // Inicializa o ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Erro ao inicializar o ESP-NOW");
    return;
  }

  // Registra o callback de envio
  esp_now_register_send_cb(OnDataSent);
  
  // Adiciona o receptor
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  
  // Adiciona o par
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Falha ao adicionar o par");
    return;
  }

  // Configura o botão
  pinMode(BUTTON_PIN, INPUT_PULLUP);
}

void loop() {
  // Verifica se o botão foi pressionado
  if (digitalRead(BUTTON_PIN) == LOW) {
    // Alterna o estado do LED
    myData.ledState = !myData.ledState;

    // Envia a mensagem
    esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));
    
    // Aguarda um pouco para evitar múltiplas leituras
    delay(200);
  }
}
